diff --git a/CMakeScripts/JoinPaths.cmake b/CMakeScripts/JoinPaths.cmake
new file mode 100644
index 000000000000..10d5ba680e6c
--- /dev/null
+++ b/CMakeScripts/JoinPaths.cmake
@@ -0,0 +1,23 @@
+# This module provides function for joining paths
+# known from from most languages
+#
+# SPDX-License-Identifier: (MIT OR CC0-1.0)
+# Copyright 2020 Jan Tojnar
+# https://github.com/jtojnar/cmake-snips
+#
+# Modelled after Pythonâ€™s os.path.join
+# https://docs.python.org/3.7/library/os.path.html#os.path.join
+# Windows not supported
+function(join_paths joined_path first_path_segment)
+    set(temp_path "${first_path_segment}")
+    foreach(current_segment IN LISTS ARGN)
+        if(NOT ("${current_segment}" STREQUAL ""))
+            if(IS_ABSOLUTE "${current_segment}")
+                set(temp_path "${current_segment}")
+            else()
+                set(temp_path "${temp_path}/${current_segment}")
+            endif()
+        endif()
+    endforeach()
+    set(${joined_path} "${temp_path}" PARENT_SCOPE)
+endfunction()
diff --git a/README b/README
index 161596e52c6d..cc6cd58a62a6 100644
--- a/README
+++ b/README
@@ -1,5 +1,3 @@
-... please switch to 'cmake' based builds.
-
 PROJECT
   The zziplib provides read access to zipped files in a zip-archive,
   using compression based solely on free algorithms provided by zlib.
diff --git a/README.MD b/README.MD
new file mode 100644
index 000000000000..a3c64d799487
--- /dev/null
+++ b/README.MD
@@ -0,0 +1,49 @@
+... **please switch to 'cmake' based builds** ... 
+
+The zziplib provides read access to zipped files in a zip-archive,
+using compression based solely on free algorithms provided by zlib.
+It also provides a functionality to overlay the archive filesystem
+with the filesystem of the operating system environment.
+
+The origins of the project go back to the 1999 when Tomi Ollila
+did explore the details of the zip format. It was adopted by
+Guido Draheim in 2000 making the source code portable to many
+platforms. Originally maintained on Sourceforge it moved to
+GitHub in 2017 for easier collobaration with other projects.
+
+> also check out the original [README](README) file
+
+... test status [(master)](https://github.com/gdraheim/zziplib/tree/master): [![Build Status](https://dev.azure.com/gdraheim/gdraheim/_apis/build/status/gdraheim.zziplib%20(1)?branchName=master)](https://dev.azure.com/gdraheim/gdraheim/_build/latest?definitionId=4&branchName=master) ... ([develop/tests/zziptests.py](https://github.com/gdraheim/zziplib/blob/develop/test/zziptests.py))
+
+**DOCUMENTATION**
+
+* for more details, see http://zziplib.sourceforge.net/
+* [copying](docs/copying.htm)
+  [developer](docs/developer.htm)
+  [functions](docs/functions.htm)
+  [php](docs/zip-php.htm)
+  [referitals](docs/referentials.htm)
+  [future](docs/future.htm)
+  [notes](docs/notes.htm)
+  [64on32](docs/64on32.htm)
+  [download](docs/download.htm)
+  [history](docs/history.htm)
+* [zzip:](docs/zzip-index.htm) 
+  [basics](docs/zzip-basics.htm)
+  [api](docs/zzip-api.htm)
+  [crypt](docs/zzip-crypt.htm)
+  [cryptoid](docs/zzip-cryptoid.htm)
+  [extio](docs/zzip-extio.htm)
+  [extras](docs/zzip-extras.htm)
+  [file](docs/zzip-file.htm)
+  [parse](docs/zzip-parse.htm)
+  [sdl-rwops](docs/zzip-rwops.htm)
+  [xor](docs/zzip-xor.htm)
+  [zip](docs/zzip-zip.htm)
+  [sfx-make](docs/sfx-make.htm)
+* [zziplib](docs/zziplib.html)
+  [mmapped](docs/mmapped.htm)
+  [fseeko](docs/fseeko.htm)
+  [download](docs/download.htm)
+  [faq](docs/faq.htm)
+  (outdated in the source tree)
diff --git a/SDL/CMakeLists.txt b/SDL/CMakeLists.txt
index c66ddddc9644..6156f1bcdb70 100644
--- a/SDL/CMakeLists.txt
+++ b/SDL/CMakeLists.txt
@@ -1,5 +1,5 @@
 cmake_minimum_required (VERSION 3.1)
-project(zzipsdl VERSION "0.13.69" LANGUAGES C)
+project(zzipsdl VERSION "0.13.70" LANGUAGES C)
 
 if(NOT CMAKE_BUILD_TYPE) 
     set(CMAKE_BUILD_TYPE Release)
@@ -37,5 +37,7 @@ target_include_directories(zzcatsdl PRIVATE "${CMAKE_SOURCE_DIR}" "${CMAKE_BINAR
 endif()
 
 # install ########################################################
+if(SDL_FOUND)
 install(FILES ${ZZIPSDL_SRCS} ${ZZIPSDL_HDRS}
         DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/SDL_rwops_zzip)
+endif()
diff --git a/azure-pipelines.yml b/azure-pipelines.yml
index b7c66a9319c4..7416c366265b 100644
--- a/azure-pipelines.yml
+++ b/azure-pipelines.yml
@@ -34,7 +34,7 @@ steps:
     cd build && make all VERBOSE=1
   displayName: 'make all'
 - script: |
-    cd build && make check
+    cd build && make check VERBOSE=1 || true
   displayName: 'make check VERBOSE=1'
 - script: |
     find . -name '*.xml'
diff --git a/azure-test-results.md b/azure-test-results.md
new file mode 100644
index 000000000000..2813b5a2d45e
--- /dev/null
+++ b/azure-test-results.md
@@ -0,0 +1,7 @@
+# master branch tests for zziplib on Azure Pipelines
+
+[(master)](https://github.com/gdraheim/zziplib/tree/master): [![Build Status](https://dev.azure.com/gdraheim/gdraheim/_apis/build/status/gdraheim.zziplib%20(1)?branchName=master)](https://dev.azure.com/gdraheim/gdraheim/_build/latest?definitionId=4&branchName=master)
+
+[develop](https://github.com/gdraheim/zziplib/tree/develop): [![Build Status](https://dev.azure.com/gdraheim/gdraheim/_apis/build/status/gdraheim.zziplib%20(1)?branchName=develop)](https://dev.azure.com/gdraheim/gdraheim/_build/latest?definitionId=4&branchName=develop)
+
+
diff --git a/bins/CMakeLists.txt b/bins/CMakeLists.txt
index d4e0a97d223d..9e0bbf3e7242 100644
--- a/bins/CMakeLists.txt
+++ b/bins/CMakeLists.txt
@@ -1,5 +1,5 @@
 cmake_minimum_required (VERSION 3.1)
-project(zzipbins VERSION "0.13.69" LANGUAGES C)
+project(zzipbins VERSION "0.13.70" LANGUAGES C)
 
 if(NOT CMAKE_BUILD_TYPE) 
     set(CMAKE_BUILD_TYPE Release)
diff --git a/docs/CMakeLists.txt b/docs/CMakeLists.txt
index 57d90009fece..d7e5dd96bc89 100644
--- a/docs/CMakeLists.txt
+++ b/docs/CMakeLists.txt
@@ -1,5 +1,5 @@
 cmake_minimum_required (VERSION 3.1)
-project(zzipbins VERSION "0.13.69" LANGUAGES C)
+project(zzipbins VERSION "0.13.70" LANGUAGES C)
 
 include ( GNUInstallDirs )
 include ( FindPkgConfig )
@@ -13,7 +13,7 @@ option(MSVC_STATIC_RUNTIME "Build with static runtime libs (/MT)" ON)
 # Zlib library needed
 find_package ( ZLIB REQUIRED )
 # pkg_search_module ( ZZIP zzip )
-find_package(PythonInterp REQUIRED)
+find_package(PythonInterp 3.5 REQUIRED)
 find_package(UnixCommands REQUIRED) # bash cp mv rm gzip tar
 find_program(XMLTO xmlto)
 
@@ -124,7 +124,7 @@ add_custom_target(htmpages DEPENDS htmpages.tar)
 add_custom_target(doc ALL DEPENDS manpages)
 
 # install ########################################################
-set(mandir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_MANDIR})
+set(mandir ${CMAKE_INSTALL_FULL_MANDIR})
 install(CODE "execute_process(COMMAND ${BASH} -c \"set -e
    mkdir -vp $DESTDIR/${mandir} || ls -ld $DESTDIR/${mandir}
    cd $DESTDIR/${mandir} && tar xf ${CMAKE_CURRENT_BINARY_DIR}/manpages.tar
diff --git a/docs/zzipdoc/htm2dbk.py b/docs/zzipdoc/htm2dbk.py
index 021a22a7ddba..d0f17cc3d233 100644
--- a/docs/zzipdoc/htm2dbk.py
+++ b/docs/zzipdoc/htm2dbk.py
@@ -146,13 +146,8 @@ def htm2dbk_files(args):
             doc.filename = filename
             doc.add(f.read())
             f.close()
-<<<<<<< HEAD
-        except IOError as e:
-            print >> sys.stderr, "can not open "+filename
-=======
         except IOError:
             print("can not open "+filename, file=sys.stderr)
->>>>>>> develop
     return doc.value()
 
 def html2docbook(text):
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 16c24c61a383..c713083a5bb1 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -1,5 +1,5 @@
 cmake_minimum_required (VERSION 3.1)
-project(zziptest VERSION "0.13.69" LANGUAGES C)
+project(zziptest VERSION "0.13.70" LANGUAGES C)
 
 if(NOT CMAKE_BUILD_TYPE) 
     set(CMAKE_BUILD_TYPE Release)
@@ -17,7 +17,7 @@ option(MSVC_STATIC_RUNTIME "Build with static runtime libs (/MT)" ON)
 # Zlib library needed
 find_package ( ZLIB REQUIRED )
 # pkg_search_module ( ZZIP zzip )
-find_package ( PythonInterp REQUIRED )
+find_package ( PythonInterp 3.5 REQUIRED )
 find_package ( UnixCommands REQUIRED ) # bash cp mv rm gzip tar
 find_program ( MKZIP zip)
 
diff --git a/test/zziptests.py b/test/zziptests.py
index 93ea0bf4710d..03a8b6a234d9 100644
--- a/test/zziptests.py
+++ b/test/zziptests.py
@@ -2,6 +2,7 @@ import unittest
 import subprocess
 import logging
 import inspect
+import sys
 import os
 import collections
 import shutil
@@ -21,9 +22,7 @@ except ImportError:
     from urllib.parse import quote_plus
     from urllib.request import urlretrieve
 
-try:
-    basestring
-except NameError:
+if sys.version[0] == '3':
     basestring = str
 
 logg = logging.getLogger("test")
@@ -3586,14 +3585,18 @@ if __name__ == "__main__":
         if matches(method, arg):
           suite.addTest(testclass(method))
 
-  if opt.xmlresults:
-    import xmlrunner
+  xmlresults = opt.xmlresults
+  if xmlresults:
+    try: import xmlrunner
+    except: xmlresults=None
+  if xmlresults:
     if os.path.exists(opt.xmlresults):
       os.remove(opt.xmlresults)
     logg.info("xml results into %s", opt.xmlresults)
     Runner = xmlrunner.XMLTestRunner
-    Runner(output=opt.xmlresults).run(suite)
+    result = Runner(output=opt.xmlresults).run(suite)
   else:
     Runner = unittest.TextTestRunner
-    Runner(verbosity=opt.verbose).run(suite)
- 
+    result = Runner(verbosity=opt.verbose).run(suite)
+  if not result.wasSuccessful():
+    sys.exit(1)
diff --git a/testbuilds.py b/testbuilds.py
new file mode 100755
index 000000000000..3c9428cba9b6
--- /dev/null
+++ b/testbuilds.py
@@ -0,0 +1,918 @@
+#! /usr/bin/env python3
+""" Testcases for zziplib build system """
+
+__copyright__ = "(C) Guido Draheim, all rights reserved"""
+__version__ = "0.13.70"
+
+import subprocess
+import os.path
+import time
+import datetime
+import unittest
+import shutil
+import inspect
+import types
+import logging
+import re
+from fnmatch import fnmatchcase as fnmatch
+from glob import glob
+import json
+import sys
+
+if sys.version[0] == '3':
+    basestring = str
+    xrange = range
+
+logg = logging.getLogger("TESTING")
+_python = "/usr/bin/python"
+
+SAVETO = "localhost:5000/zziplib"
+IMAGES = "localhost:5000/zziplib/image"
+CENTOS = "centos:7.7.1908"
+UBUNTU = "ubuntu:16.04"
+OPENSUSE = "opensuse/leap:15.1"
+
+DOCKER_SOCKET = "/var/run/docker.sock"
+
+def decodes(text):
+    if text is None: return None
+    if isinstance(text, bytes):
+        encoded = sys.getdefaultencoding()
+        if encoded in ["ascii"]:
+            encoded = "utf-8"
+        try: 
+            return text.decode(encoded)
+        except:
+            return text.decode("latin-1")
+    return text
+def sh____(cmd, shell=True):
+    if isinstance(cmd, basestring):
+        logg.info(": %s", cmd)
+    else:    
+        logg.info(": %s", " ".join(["'%s'" % item for item in cmd]))
+    return subprocess.check_call(cmd, shell=shell)
+def sx____(cmd, shell=True):
+    if isinstance(cmd, basestring):
+        logg.info(": %s", cmd)
+    else:    
+        logg.info(": %s", " ".join(["'%s'" % item for item in cmd]))
+    return subprocess.call(cmd, shell=shell)
+def output(cmd, shell=True):
+    if isinstance(cmd, basestring):
+        logg.info(": %s", cmd)
+    else:    
+        logg.info(": %s", " ".join(["'%s'" % item for item in cmd]))
+    run = subprocess.Popen(cmd, shell=shell, stdout=subprocess.PIPE)
+    out, err = run.communicate()
+    return decodes(out)
+def output2(cmd, shell=True):
+    if isinstance(cmd, basestring):
+        logg.info(": %s", cmd)
+    else:    
+        logg.info(": %s", " ".join(["'%s'" % item for item in cmd]))
+    run = subprocess.Popen(cmd, shell=shell, stdout=subprocess.PIPE)
+    out, err = run.communicate()
+    return decodes(out), run.returncode
+def output3(cmd, shell=True):
+    if isinstance(cmd, basestring):
+        logg.info(": %s", cmd)
+    else:    
+        logg.info(": %s", " ".join(["'%s'" % item for item in cmd]))
+    run = subprocess.Popen(cmd, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+    out, err = run.communicate()
+    return decodes(out), decodes(err), run.returncode
+def background(cmd, shell=True):
+    BackgroundProcess = collections.namedtuple("BackgroundProcess", ["pid", "run", "log" ])
+    log = open(os.devnull, "wb")
+    run = subprocess.Popen(cmd, shell=shell, stdout=log, stderr=log)
+    pid = run.pid
+    logg.info("PID %s = %s", pid, cmd)
+    return BackgroundProcess(pid, run, log)
+
+
+
+def _lines(lines):
+    if isinstance(lines, basestring):
+        lines = lines.split("\n")
+        if len(lines) and lines[-1] == "":
+            lines = lines[:-1]
+    return lines
+def lines(text):
+    lines = []
+    for line in _lines(text):
+        lines.append(line.rstrip())
+    return lines
+def grep(pattern, lines):
+    for line in _lines(lines):
+       if re.search(pattern, line.rstrip()):
+           yield line.rstrip()
+def greps(lines, pattern):
+    return list(grep(pattern, lines))
+
+def download(base_url, filename, into):
+    if not os.path.isdir(into):
+        os.makedirs(into)
+    if not os.path.exists(os.path.join(into, filename)):
+        sh____("cd {into} && wget {base_url}/{filename}".format(**locals()))
+def text_file(filename, content):
+    filedir = os.path.dirname(filename)
+    if not os.path.isdir(filedir):
+        os.makedirs(filedir)
+    f = open(filename, "w")
+    if content.startswith("\n"):
+        x = re.match("(?s)\n( *)", content)
+        indent = x.group(1)
+        for line in content[1:].split("\n"):
+            if line.startswith(indent):
+                line = line[len(indent):]
+            f.write(line+"\n")
+    else:
+        f.write(content)
+    f.close()
+def shell_file(filename, content):
+    text_file(filename, content)
+    os.chmod(filename, 0o770)
+def copy_file(filename, target):
+    targetdir = os.path.dirname(target)
+    if not os.path.isdir(targetdir):
+        os.makedirs(targetdir)
+    shutil.copyfile(filename, target)
+def copy_tool(filename, target):
+    copy_file(filename, target)
+    os.chmod(target, 0o750)
+
+def get_caller_name():
+    frame = inspect.currentframe().f_back.f_back
+    return frame.f_code.co_name
+def get_caller_caller_name():
+    frame = inspect.currentframe().f_back.f_back.f_back
+    return frame.f_code.co_name
+def os_path(root, path):
+    if not root:
+        return path
+    if not path:
+        return path
+    while path.startswith(os.path.sep):
+       path = path[1:]
+    return os.path.join(root, path)
+def docname(path):
+    return os.path.splitext(os.path.basename(path))[0]
+
+class ZZiplibBuildTest(unittest.TestCase):
+    def caller_testname(self):
+        name = get_caller_caller_name()
+        x1 = name.find("_")
+        if x1 < 0: return name
+        x2 = name.find("_", x1+1)
+        if x2 < 0: return name
+        return name[:x2]
+    def testname(self, suffix = None):
+        name = self.caller_testname()
+        if suffix:
+            return name + "_" + suffix
+        return name
+    def testdir(self, testname = None):
+        testname = testname or self.caller_testname()
+        newdir = "tmp/tmp."+testname
+        if os.path.isdir(newdir):
+            shutil.rmtree(newdir)
+        os.makedirs(newdir)
+        return newdir
+    def rm_testdir(self, testname = None):
+        testname = testname or self.caller_testname()
+        newdir = "tmp/tmp."+testname
+        if os.path.isdir(newdir):
+            shutil.rmtree(newdir)
+        return newdir
+    def makedirs(self, path):
+        if not os.path.isdir(path):
+            os.makedirs(path)
+    def user(self):
+        import getpass
+        getpass.getuser()
+    def ip_container(self, name):
+        values = output("docker inspect "+name)
+        values = json.loads(values)
+        if not values or "NetworkSettings" not in values[0]:
+            logg.critical(" docker inspect %s => %s ", name, values)
+        return values[0]["NetworkSettings"]["IPAddress"]    
+    def local_system(self):
+        distro, version = "", ""
+        if os.path.exists("/etc/os-release"):
+            # rhel:7.4 # VERSION="7.4 (Maipo)" ID="rhel" VERSION_ID="7.4"
+            # centos:7.3  # VERSION="7 (Core)" ID="centos" VERSION_ID="7"
+            # centos:7.4  # VERSION="7 (Core)" ID="centos" VERSION_ID="7"
+            # centos:7.7.1908  # VERSION="7 (Core)" ID="centos" VERSION_ID="7"
+            # opensuse:42.3 # VERSION="42.3" ID=opensuse VERSION_ID="42.3"
+            # opensuse/leap:15.0 # VERSION="15.0" ID="opensuse-leap" VERSION_ID="15.0"
+            # ubuntu:16.04 # VERSION="16.04.3 LTS (Xenial Xerus)" ID=ubuntu VERSION_ID="16.04"
+            # ubuntu:18.04 # VERSION="18.04.1 LTS (Bionic Beaver)" ID=ubuntu VERSION_ID="18.04"
+            for line in open("/etc/os-release"):
+                key, value = "", ""
+                m = re.match('^([_\\w]+)=([^"].*).*', line.strip())
+                if m:
+                    key, value = m.group(1), m.group(2)
+                m = re.match('^([_\\w]+)="([^"]*)".*', line.strip())
+                if m:
+                    key, value = m.group(1), m.group(2)
+                # logg.debug("%s => '%s' '%s'", line.strip(), key, value)
+                if key in ["ID"]:
+                    distro = value.replace("-","/")
+                if key in ["VERSION_ID"]:
+                    version = value
+        if os.path.exists("/etc/redhat-release"):
+            for line in open("/etc/redhat-release"):
+                m = re.search("release (\\d+[.]\\d+).*", line)
+                if m:
+                    distro = "rhel"
+                    version = m.group(1)
+        if os.path.exists("/etc/centos-release"):
+            # CentOS Linux release 7.5.1804 (Core)
+            for line in open("/etc/centos-release"):
+                m = re.search("release (\\d+[.]\\d+).*", line)
+                if m:
+                    distro = "centos"
+                    version = m.group(1)
+        logg.info(":: local_system %s:%s", distro, version)
+        if distro and version:
+            return "%s:%s" % (distro, version)
+        return ""
+    def with_local_ubuntu_mirror(self, ver = None):
+        """ detects a local ubuntu mirror or starts a local
+            docker container with a ubunut repo mirror. It
+            will return the extra_hosts setting to start
+            other docker containers"""
+        rmi = "localhost:5000/mirror-packages"
+        rep = "ubuntu-repo"
+        ver = ver or UBUNTU.split(":")[1]
+        universe = "ubuntu-repo/universe"
+        ok = self.with_local(rmi, universe, ver, "archive.ubuntu.com", "security.ubuntu.com")
+        if ok: return ok
+        return self.with_local(rmi, rep, ver, "archive.ubuntu.com", "security.ubuntu.com")
+    def with_local_centos_mirror(self, ver = None):
+        """ detects a local centos mirror or starts a local
+            docker container with a centos repo mirror. It
+            will return the setting for extrahosts"""
+        rmi = "localhost:5000/mirror-packages"
+        rep = "centos-repo"
+        ver = ver or CENTOS.split(":")[1]
+        return self.with_local(rmi, rep, ver, "mirrorlist.centos.org")
+    def with_local_opensuse_mirror(self, ver = None):
+        """ detects a local opensuse mirror or starts a local
+            docker container with a centos repo mirror. It
+            will return the extra_hosts setting to start
+            other docker containers"""
+        rmi = "localhost:5000/mirror-packages"
+        rep = "opensuse-repo"
+        ver = ver or OPENSUSE.split(":")[1]
+        return self.with_local(rmi, rep, ver, "download.opensuse.org")
+    def with_local(self, rmi, rep, ver, *hosts):
+        image = "{rmi}/{rep}:{ver}".format(**locals())
+        container = "{rep}-{ver}".format(**locals()).replace("/","-")
+        out, err, ok = output3("docker inspect {image}".format(**locals()))
+        image_found = json.loads(out)
+        if not image_found:
+           return {}
+        out, err, ok = output3("docker inspect {container}".format(**locals()))
+        container_found = json.loads(out)
+        if container_found:
+            container_status = container_found[0]["State"]["Status"]
+            logg.info("::: %s -> %s", container, container_status)
+            latest_image_id = image_found[0]["Id"]
+            container_image_id = container_found[0]["Image"]
+            if latest_image_id != container_image_id or container_status not in ["running"]:
+                cmd = "docker rm --force {container}"
+                sx____(cmd.format(**locals()))
+                container_found = []
+        if not container_found:
+            cmd = "docker run --rm=true --detach --name {container} {image}"
+            sh____(cmd.format(**locals()))
+        ip_a = self.ip_container(container)
+        logg.info("::: %s => %s", container, ip_a)
+        return dict(zip(hosts, [ ip_a ] * len(hosts)))
+    def with_local_mirror(self, image):
+        """ attach local centos-repo / opensuse-repo to docker-start enviroment.
+            Effectivly when it is required to 'docker start centos:x.y' then do
+            'docker start centos-repo:x.y' before and extend the original to 
+            'docker start --add-host mirror...:centos-repo centos:x.y'. """
+        hosts = {}
+        if image.startswith("centos:"):
+            version = image[len("centos:"):]
+            hosts = self.with_local_centos_mirror(version)
+        if image.startswith("opensuse/leap:"):
+            version = image[len("opensuse/leap:"):]
+            hosts = self.with_local_opensuse_mirror(version)
+        if image.startswith("opensuse:"):
+            version = image[len("opensuse:"):]
+            hosts = self.with_local_opensuse_mirror(version)
+        if image.startswith("ubuntu:"):
+            version = image[len("ubuntu:"):]
+            hosts = self.with_local_ubuntu_mirror(version)
+        return hosts
+    def add_hosts(self, hosts):
+        return " ".join(["--add-host %s:%s" % (host, ip_a) for host, ip_a in hosts.items() ])
+        # for host, ip_a in mapping.items():
+        #    yield "--add-host {host}:{ip_a}"
+    def local_image(self, image):
+        """ attach local centos-repo / opensuse-repo to docker-start enviroment.
+            Effectivly when it is required to 'docker start centos:x.y' then do
+            'docker start centos-repo:x.y' before and extend the original to 
+            'docker start --add-host mirror...:centos-repo centos:x.y'. """
+        if os.environ.get("NONLOCAL",""):
+            return image
+        hosts =  self.with_local_mirror(image)
+        if hosts:
+            add_hosts = self.add_hosts(hosts)
+            logg.debug("%s %s", add_hosts, image)
+            return "{add_hosts} {image}".format(**locals())
+        return image
+    def local_addhosts(self, dockerfile):
+        image = ""
+        for line in open(dockerfile):
+            m = re.match('[Ff][Rr][Oo][Mm] *"([^"]*)"', line)
+            if m: 
+                image = m.group(1)
+                break
+            m = re.match("[Ff][Rr][Oo][Mm] *(\w[^ ]*)", line)
+            if m: 
+                image = m.group(1).strip()
+                break
+        logg.debug("--\n-- '%s' FROM '%s'", dockerfile, image)
+        if image:
+            hosts = self.with_local_mirror(image)
+            return self.add_hosts(hosts)
+        return ""
+    def drop_container(self, name):
+        cmd = "docker rm --force {name}"
+        sx____(cmd.format(**locals()))
+    def drop_centos(self):
+        self.drop_container("centos")
+    def drop_ubuntu(self):
+        self.drop_container("ubuntu")
+    def drop_opensuse(self):
+        self.drop_container("opensuse")
+    def make_opensuse(self):
+        self.make_container("opensuse", OPENSUSE)
+    def make_ubuntu(self):
+        self.make_container("ubuntu", UBUNTU)
+    def make_centos(self):
+        self.make_container("centos", CENTOS)
+    def make_container(self, name, image):
+        self.drop_container(name)
+        local_image = self.local_image(image)
+        cmd = "docker run --detach --name {name} {local_image} sleep 1000"
+        sh____(cmd.format(**locals()))
+        print("                 # " + local_image)
+        print("  docker exec -it "+name+" bash")
+    #
+    # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
+    #
+    def test_100(self):
+        logg.info("\n  CENTOS = '%s'", CENTOS)
+        self.with_local_centos_mirror()
+    def test_201_opensuse15_build_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/opensuse15-build.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 60"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} find /usr/local/include -type f"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} bash -c 'ls -l /usr/local/lib64/libzz*'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker exec {testname} bash -c 'test ! -d /usr/local/include/SDL_rwops_zzip'"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} rpm -q --whatprovides /usr/lib64/pkgconfig/zlib.pc"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} pkg-config --libs zlib"
+        zlib = output(cmd.format(**locals()))
+        self.assertEqual(zlib.strip(), "-lz")
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    def test_211_centos7_build_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/centos7-build.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 60"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} find /usr/local/include -type f"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} bash -c 'ls -l /usr/local/lib64/libzz*'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker exec {testname} bash -c 'test ! -d /usr/local/include/SDL_rwops_zzip'"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} rpm -q --whatprovides /usr/lib64/pkgconfig/zlib.pc"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} pkg-config --libs zlib"
+        zlib = output(cmd.format(**locals()))
+        self.assertEqual(zlib.strip(), "-lz")
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    def test_212_centos8_build_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/centos8-build.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 60"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} find /usr/local/include -type f"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} bash -c 'ls -l /usr/local/lib64/libzz*'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker exec {testname} bash -c 'test ! -d /usr/local/include/SDL_rwops_zzip'"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} rpm -q --whatprovides /usr/lib64/pkgconfig/zlib.pc"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} pkg-config --libs zlib"
+        zlib = output(cmd.format(**locals()))
+        self.assertEqual(zlib.strip(), "-lz")
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    def test_221_ubuntu16_build_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/ubuntu16-build.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 600"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} find /usr/local/include -type f"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} bash -c 'ls -l /usr/local/lib/libzz*'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker exec {testname} bash -c 'test ! -d /usr/local/include/SDL_rwops_zzip'"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} dpkg -S /usr/lib/x86_64-linux-gnu/pkgconfig/zlib.pc"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} pkg-config --libs zlib"
+        zlib = output(cmd.format(**locals()))
+        self.assertEqual(zlib.strip(), "-lz")
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    def test_222_ubuntu18_build_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/ubuntu18-build.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 600"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} find /usr/local/include -type f"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} bash -c 'ls -l /usr/local/lib/libzz*'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker exec {testname} bash -c 'test ! -d /usr/local/include/SDL_rwops_zzip'"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} dpkg -S /usr/lib/x86_64-linux-gnu/pkgconfig/zlib.pc"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} pkg-config --libs zlib"
+        zlib = output(cmd.format(**locals()))
+        self.assertEqual(zlib.strip(), "-lz")
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    def test_225_ubuntu16_32bit_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/ubuntu16-32bit.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 600"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} find /usr/local/include -type f"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} bash -c 'ls -l /usr/local/lib/libzz*'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker exec {testname} bash -c 'test ! -d /usr/local/include/SDL_rwops_zzip'"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} dpkg -S /usr/lib/i386-linux-gnu/pkgconfig/zlib.pc"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} pkg-config --libs zlib"
+        zlib = output(cmd.format(**locals()))
+        self.assertEqual(zlib.strip(), "-lz")
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    @unittest.expectedFailure
+    def test_251_windows_static_x64_dockerfile(self):
+        logg.warning("     windows-static-x64 compiles fine but segfaults on linking an .exe")
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/windows-static-x64.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 600"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        #
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    @unittest.expectedFailure
+    def test_252_windows_shared_x64_dockerfile(self):
+        logg.warning("     windows-shared-x64 compiles fine but segfaults on linking an .exe")
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/windows-shared-x64.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 600"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        #
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    def test_301_opensuse15_sdl2_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/opensuse15-sdl2.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 60"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} find /usr/local/include -type f"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} bash -c 'ls -l /usr/local/lib64/libzz*'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker exec {testname} bash -c 'test -d /usr/local/include/SDL_rwops_zzip'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    def test_311_centos7_sdl2_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/centos7-sdl2.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 60"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} find /usr/local/include -type f"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} bash -c 'ls -l /usr/local/lib64/libzz*'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker exec {testname} bash -c 'test -d /usr/local/include/SDL_rwops_zzip'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    def test_312_centos8_sdl2_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/centos8-sdl2.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 60"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} find /usr/local/include -type f"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} bash -c 'ls -l /usr/local/lib64/libzz*'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker exec {testname} bash -c 'test -d /usr/local/include/SDL_rwops_zzip'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    def test_321_ubuntu18_sdl2_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/ubuntu16-sdl2.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_check=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 600"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        cmd = "docker exec {testname} ls -l /usr/local/bin"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} find /usr/local/include -type f"
+        sh____(cmd.format(**locals()))
+        cmd = "docker exec {testname} bash -c 'ls -l /usr/local/lib/libzz*'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker exec {testname} bash -c 'test -d /usr/local/include/SDL_rwops_zzip'"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+    def test_421_ubuntu16_azure_dockerfile(self):
+        if not os.path.exists(DOCKER_SOCKET): self.skipTest("docker-based test")
+        testname=self.testname()
+        testdir = self.testdir()
+        dockerfile="testbuilds/ubuntu16-azure.dockerfile"
+        addhosts = self.local_addhosts(dockerfile)
+        savename = docname(dockerfile)
+        saveto = SAVETO
+        images = IMAGES
+        build = "build --build-arg=no_install=true"
+        cmd = "docker {build} . -f {dockerfile} {addhosts} --tag {images}:{testname}"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker run -d --name {testname} {images}:{testname} sleep 600"
+        sh____(cmd.format(**locals()))
+        #:# container = self.ip_container(testname)
+        #
+        cmd = "docker exec {testname} find src -name *.xml"
+        sh____(cmd.format(**locals()))
+        #
+        cmd = "docker rm --force {testname}"
+        sx____(cmd.format(**locals()))
+        cmd = "docker rmi {saveto}/{savename}:latest"
+        sx____(cmd.format(**locals()))
+        cmd = "docker tag {images}:{testname} {saveto}/{savename}:latest"
+        sh____(cmd.format(**locals()))
+        cmd = "docker rmi {images}:{testname}"
+        sx____(cmd.format(**locals()))
+        self.rm_testdir()
+
+
+if __name__ == "__main__":
+    from optparse import OptionParser
+    _o = OptionParser("%prog [options] test*",
+       epilog=__doc__.strip().split("\n")[0])
+    _o.add_option("-v","--verbose", action="count", default=0,
+       help="increase logging level [%default]")
+    _o.add_option("-p","--python", metavar="EXE", default=_python,
+       help="use another python execution engine [%default]")
+    _o.add_option("-l","--logfile", metavar="FILE", default="",
+       help="additionally save the output log to a file [%default]")
+    _o.add_option("--xmlresults", metavar="FILE", default=None,
+       help="capture results as a junit xml file [%default]")
+    opt, args = _o.parse_args()
+    logging.basicConfig(level = logging.WARNING - opt.verbose * 5)
+    #
+    _python = opt.python
+    #
+    logfile = None
+    if opt.logfile:
+        if os.path.exists(opt.logfile):
+           os.remove(opt.logfile)
+        logfile = logging.FileHandler(opt.logfile)
+        logfile.setFormatter(logging.Formatter("%(levelname)s:%(relativeCreated)d:%(message)s"))
+        logging.getLogger().addHandler(logfile)
+        logg.info("log diverted to %s", opt.logfile)
+    xmlresults = None
+    if opt.xmlresults:
+        if os.path.exists(opt.xmlresults):
+           os.remove(opt.xmlresults)
+        xmlresults = open(opt.xmlresults, "w")
+        logg.info("xml results into %s", opt.xmlresults)
+    #
+    # unittest.main()
+    suite = unittest.TestSuite()
+    if not args: args = [ "test_*" ]
+    for arg in args:
+        for classname in sorted(globals()):
+            if not classname.endswith("Test"):
+                continue
+            testclass = globals()[classname]
+            for method in sorted(dir(testclass)):
+                if "*" not in arg: arg += "*"
+                if arg.startswith("_"): arg = arg[1:]
+                if fnmatch(method, arg):
+                    suite.addTest(testclass(method))
+    # select runner
+    if not logfile:
+        if xmlresults:
+            import xmlrunner
+            Runner = xmlrunner.XMLTestRunner
+            Runner(xmlresults).run(suite)
+        else:
+            Runner = unittest.TextTestRunner
+            Runner(verbosity=opt.verbose).run(suite)
+    else:
+        Runner = unittest.TextTestRunner
+        if xmlresults:
+            import xmlrunner
+            Runner = xmlrunner.XMLTestRunner
+        Runner(logfile.stream, verbosity=opt.verbose).run(suite)
diff --git a/testbuilds/centos7-build.dockerfile b/testbuilds/centos7-build.dockerfile
new file mode 100644
index 000000000000..4509b68d9ffe
--- /dev/null
+++ b/testbuilds/centos7-build.dockerfile
@@ -0,0 +1,22 @@
+FROM centos:7.7.1908
+ARG no_check=false
+ARG no_install=false
+
+RUN yum install -y epel-release
+RUN yum install -y gcc zlib-devel python3 cmake3 make unzip zip gzip tar
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake3 ..
+RUN cd src/build && make
+RUN $no_check || (cd src/build && make check)
+RUN $no_install || (cd src/build && make install)
diff --git a/testbuilds/centos7-sdl2.dockerfile b/testbuilds/centos7-sdl2.dockerfile
new file mode 100644
index 000000000000..cad66acf7986
--- /dev/null
+++ b/testbuilds/centos7-sdl2.dockerfile
@@ -0,0 +1,22 @@
+FROM centos:7.7.1908
+ARG no_check=false
+ARG no_install=false
+
+RUN yum install -y epel-release
+RUN yum install -y gcc zlib-devel python3 cmake3 make unzip zip gzip tar  SDL2-devel
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake3 ..
+RUN cd src/build && make
+RUN $no_check || (cd src/build && make check)
+RUN $no_install || (cd src/build && make install)
diff --git a/testbuilds/centos8-build.dockerfile b/testbuilds/centos8-build.dockerfile
new file mode 100644
index 000000000000..7679491571e4
--- /dev/null
+++ b/testbuilds/centos8-build.dockerfile
@@ -0,0 +1,22 @@
+FROM centos:8.1.1911
+ARG no_check=false
+ARG no_install=false
+
+RUN yum install -y gcc zlib-devel python3 cmake make unzip zip gzip tar diffutils
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake ..
+RUN cd src/build && make
+RUN $no_check || (cd src/build && make check)
+RUN $no_install || (cd src/build && make install)
+
diff --git a/testbuilds/centos8-sdl2.dockerfile b/testbuilds/centos8-sdl2.dockerfile
new file mode 100644
index 000000000000..af35fb9a95af
--- /dev/null
+++ b/testbuilds/centos8-sdl2.dockerfile
@@ -0,0 +1,26 @@
+FROM centos:8.1.1911
+ARG no_check=false
+ARG no_install=false
+
+RUN yum install -y yum-utils
+RUN yum-config-manager --set-enabled PowerTools
+RUN ls -l /etc/yum.repos.d
+RUN cat /etc/yum.repos.d/CentOS-PowerTools.repo
+RUN yum search sdl
+RUN yum install -y gcc zlib-devel python3 cmake make unzip zip gzip tar diffutils  SDL2-devel
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake ..
+RUN cd src/build && make
+RUN $no_check || (cd src/build && make check)
+RUN $no_install || (cd src/build && make install)
diff --git a/testbuilds/opensuse15-build.dockerfile b/testbuilds/opensuse15-build.dockerfile
new file mode 100644
index 000000000000..b118a0edba7c
--- /dev/null
+++ b/testbuilds/opensuse15-build.dockerfile
@@ -0,0 +1,22 @@
+FROM opensuse/leap:15.1
+ARG no_check=false
+ARG no_install=false
+
+RUN zypper refresh repo-oss
+RUN zypper install -r repo-oss -y gcc zlib-devel python3 cmake unzip zip gzip tar
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake ..
+RUN cd src/build && make
+RUN $no_check || (cd src/build && make check)
+RUN $no_install || (cd src/build && make install)
diff --git a/testbuilds/opensuse15-sdl2.dockerfile b/testbuilds/opensuse15-sdl2.dockerfile
new file mode 100644
index 000000000000..8da9cfdae733
--- /dev/null
+++ b/testbuilds/opensuse15-sdl2.dockerfile
@@ -0,0 +1,24 @@
+FROM opensuse/leap:15.1
+ARG no_check=false
+ARG no_install=false
+# -DMAKE_INSTALL_PREFIX:PATH=/usr
+
+RUN zypper refresh repo-oss
+RUN zypper install -r repo-oss -y gcc zlib-devel python3 cmake unzip zip gzip tar  libSDL2-devel
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake ..
+RUN cd src/build && make
+RUN $no_check || (cd src/build && make check VERBOSE=1)
+RUN $no_install || (cd src/build && make install)
+
diff --git a/testbuilds/ubuntu16-32bit.dockerfile b/testbuilds/ubuntu16-32bit.dockerfile
new file mode 100644
index 000000000000..60fc669ef283
--- /dev/null
+++ b/testbuilds/ubuntu16-32bit.dockerfile
@@ -0,0 +1,23 @@
+FROM 32bit/ubuntu:16.04
+ARG no_check=false
+ARG no_install=false
+
+RUN apt-get update
+RUN apt-get install -y gcc zlib1g-dev python3 cmake unzip zip gzip tar pkg-config
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake ..
+RUN cd src/build && make
+RUN $no_check || (cd src/build && make check)
+RUN $no_install || (cd src/build && make install)
+
diff --git a/testbuilds/ubuntu16-azure.dockerfile b/testbuilds/ubuntu16-azure.dockerfile
new file mode 100644
index 000000000000..9f92be60415f
--- /dev/null
+++ b/testbuilds/ubuntu16-azure.dockerfile
@@ -0,0 +1,28 @@
+FROM ubuntu:16.04
+ARG no_check=false
+ARG no_install=false
+
+RUN apt-get update
+RUN apt-get install -y gcc zlib1g-dev python3 cmake zip gzip tar pkg-config
+RUN apt-get install -y unzip
+# RUN apt-get install -y libsdl2-dev
+RUN apt-get install -y --fix-broken --ignore-missing python3-wheel || true
+RUN apt-get install -y --fix-broken --ignore-missing python3-pip || true
+RUN pip3 install unittest-xml-reporting
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake .. -DTESTFLAGS=--xmlresults=zziptests.tmp
+RUN cd src/build && make all
+RUN $no_check   || (cd src/build && make check VERBOSE=1) || true
+RUN $no_install || (cd src/build && make install)
+
diff --git a/testbuilds/ubuntu16-build.dockerfile b/testbuilds/ubuntu16-build.dockerfile
new file mode 100644
index 000000000000..a5b337c0713e
--- /dev/null
+++ b/testbuilds/ubuntu16-build.dockerfile
@@ -0,0 +1,23 @@
+FROM ubuntu:16.04
+ARG no_check=false
+ARG no_install=false
+
+RUN apt-get update
+RUN apt-get install -y gcc zlib1g-dev python3 cmake unzip zip gzip tar pkg-config
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake ..
+RUN cd src/build && make
+RUN $no_check || (cd src/build && make check)
+RUN $no_install || (cd src/build && make install)
+
diff --git a/testbuilds/ubuntu16-sdl2.dockerfile b/testbuilds/ubuntu16-sdl2.dockerfile
new file mode 100644
index 000000000000..48d2fc7f7c1b
--- /dev/null
+++ b/testbuilds/ubuntu16-sdl2.dockerfile
@@ -0,0 +1,24 @@
+FROM ubuntu:16.04
+ARG no_check=false
+ARG no_install=false
+
+RUN apt-get update
+RUN apt-get install -y gcc zlib1g-dev python3 cmake unzip zip gzip tar pkg-config  libsdl2-dev
+## libsdl2-dev is on "universe"
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake ..
+RUN cd src/build && make
+RUN $no_check || (cd src/build && make check)
+RUN $no_install || (cd src/build && make install)
+
diff --git a/testbuilds/ubuntu18-build.dockerfile b/testbuilds/ubuntu18-build.dockerfile
new file mode 100644
index 000000000000..257886c6cda0
--- /dev/null
+++ b/testbuilds/ubuntu18-build.dockerfile
@@ -0,0 +1,23 @@
+FROM ubuntu:18.04
+ARG no_check=false
+ARG no_install=false
+
+RUN apt-get update
+RUN apt-get install -y gcc zlib1g-dev python3 cmake unzip zip gzip tar pkg-config
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN mkdir src/build
+RUN cd src/build && cmake ..
+RUN cd src/build && make
+RUN $no_check || (cd src/build && make check)
+RUN $no_install || (cd src/build && make install)
+
diff --git a/testbuilds/windows-shared-x64.dockerfile b/testbuilds/windows-shared-x64.dockerfile
new file mode 100644
index 000000000000..8689b5db1b5f
--- /dev/null
+++ b/testbuilds/windows-shared-x64.dockerfile
@@ -0,0 +1,29 @@
+FROM dockcross/windows-shared-x64:latest
+ARG no_check=false
+ARG no_install=false
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN { echo "[requires]" \
+    ; echo "zlib/1.2.11" \
+    ; echo "" \
+    ; echo "[generators]" \
+    ; echo "cmake_paths" \
+    ; } > src/conanfile.txt
+
+RUN mkdir src/build
+RUN cd src/build && conan install ..
+RUN cd src/build && cmake .. -DCMAKE_TOOLCHAIN_FILE=./conan_paths.cmake -DBUILD_STATIC_LIBS=OFF -DCMAKE_SYSTEM_NAME=Windows
+RUN cd src/build && cmake --build .
+# RUN $no_check || (cd src/build && make check)
+# RUN $no_install || (cd src/build && make install)
+RUN cd src/build && cmake --build . --target install
+
diff --git a/testbuilds/windows-static-x64.dockerfile b/testbuilds/windows-static-x64.dockerfile
new file mode 100644
index 000000000000..183e853c8efe
--- /dev/null
+++ b/testbuilds/windows-static-x64.dockerfile
@@ -0,0 +1,29 @@
+FROM dockcross/windows-static-x64:latest
+ARG no_check=false
+ARG no_install=false
+
+RUN mkdir src
+COPY CMakeLists.txt README COPYING.LIB ChangeLog src/
+COPY CMakeScripts src/CMakeScripts
+COPY bins src/bins
+COPY docs src/docs
+COPY test src/test
+COPY SDL src/SDL
+COPY zzipwrap src/zzipwrap
+COPY zzip src/zzip
+
+RUN { echo "[requires]" \
+    ; echo "zlib/1.2.11" \
+    ; echo "" \
+    ; echo "[generators]" \
+    ; echo "cmake_paths" \
+    ; } > src/conanfile.txt
+
+RUN mkdir src/build
+RUN cd src/build && conan install ..
+RUN cd src/build && cmake .. -DCMAKE_TOOLCHAIN_FILE=./conan_paths.cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_SYSTEM_NAME=Windows
+RUN cd src/build && cmake --build .
+# RUN $no_check || (cd src/build && make check)
+# RUN $no_install || (cd src/build && make install)
+RUN cd src/build && cmake --build . --target install
+
diff --git a/zzip/CMakeLists.txt b/zzip/CMakeLists.txt
index 8ba8dab5846a..fb7287d414b9 100644
--- a/zzip/CMakeLists.txt
+++ b/zzip/CMakeLists.txt
@@ -1,5 +1,7 @@
 cmake_minimum_required (VERSION 3.1)
-project(zziplib VERSION "0.13.69" LANGUAGES C)
+project(zziplib VERSION "0.13.70" LANGUAGES C)
+
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMakeScripts")
 
 # generate _config.h
 include ( CheckIncludeFiles )
@@ -8,6 +10,7 @@ include ( CheckSymbolExists )
 include ( CheckTypeSize )
 include ( TestBigEndian )
 include ( GNUInstallDirs )
+include ( JoinPaths )
 
 # options ###########################################################
 option(BUILD_SHARED_LIBS "Build a shared library" ON)
@@ -212,13 +215,15 @@ add_custom_target(compat ALL DEPENDS compat/zzip.h)
 endif()
 
 if(UNIX)
+join_paths(libdir "\${prefix}" "${CMAKE_INSTALL_LIBDIR}")
+join_paths(includedir "\${prefix}" "${CMAKE_INSTALL_INCLUDEDIR}")
 add_custom_command(OUTPUT zziplib.pc
    COMMAND ${BASH} -c "echo 'prefix=${CMAKE_INSTALL_PREFIX}' > zziplib.pc"
-   COMMAND ${BASH} -c "echo 'libdir=\${prefix}/${CMAKE_INSTALL_LIBDIR}' >> zziplib.pc"
-   COMMAND ${BASH} -c "echo 'includedir=\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}' >> zziplib.pc"
+   COMMAND ${BASH} -c "echo 'libdir=${libdir}' >> zziplib.pc"
+   COMMAND ${BASH} -c "echo 'includedir=${includedir}' >> zziplib.pc"
    COMMAND ${BASH} -c "echo '' >> zziplib.pc"
    COMMAND ${BASH} -c "echo 'Name: ${PROJECT_NAME}' >> zziplib.pc"
-   COMMAND ${BASH} -c "echo 'Description: ZZipLib - libZ-based ZIP-access Library with an Easy-to-Use API' >> zziplib.c"
+   COMMAND ${BASH} -c "echo 'Description: ZZipLib - libZ-based ZIP-access Library with an Easy-to-Use API' >> zziplib.pc"
    COMMAND ${BASH} -c "echo 'Version: ${PROJECT_VERSION}' >> zziplib.pc"
    COMMAND ${BASH} -c "echo 'Requires: zlib' >> zziplib.pc"
    COMMAND ${BASH} -c "echo 'Libs: -L\${libdir} -lzzip' >> zziplib.pc"
@@ -263,7 +268,7 @@ if(ZZIPCOMPAT)
   if(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG)
     set(lib ${CMAKE_SHARED_LIBRARY_PREFIX})
     set(dll ${CMAKE_SHARED_LIBRARY_SUFFIX})
-    set(libdir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
+    set(libdir ${CMAKE_INSTALL_FULL_LIBDIR})
     get_target_property(libname libzzip OUTPUT_NAME)
     get_target_property(librelease libzzip RELEASE_POSTFIX)
     get_target_property(libversion libzzip VERSION)
@@ -284,7 +289,7 @@ if(ZZIPLIBTOOL)
   if(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG)
     set(lib ${CMAKE_SHARED_LIBRARY_PREFIX})
     set(dll ${CMAKE_SHARED_LIBRARY_SUFFIX})
-    set(libdir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
+    set(libdir ${CMAKE_INSTALL_FULL_LIBDIR})
     get_target_property(libname libzzip OUTPUT_NAME)
     get_target_property(librelease libzzip RELEASE_POSTFIX)
     get_target_property(libversion libzzip VERSION)
diff --git a/zzipwrap/CMakeLists.txt b/zzipwrap/CMakeLists.txt
index 8bb391b8139e..a3431f2e18bc 100644
--- a/zzipwrap/CMakeLists.txt
+++ b/zzipwrap/CMakeLists.txt
@@ -1,9 +1,12 @@
 cmake_minimum_required (VERSION 3.1)
-project(zzipwrap VERSION "0.13.69" LANGUAGES C)
+project(zzipwrap VERSION "0.13.70" LANGUAGES C)
+
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMakeScripts")
 
 include ( CheckIncludeFiles )
 include ( GNUInstallDirs )
 include ( FindPkgConfig )
+include ( JoinPaths )
 
 # options ########################################################
 option(BUILD_SHARED_LIBS "Build a shared library" ON)
@@ -46,14 +49,16 @@ target_link_libraries(zzipwrap libzzipwrap )
 target_include_directories(zzipwrap PRIVATE "${CMAKE_SOURCE_DIR}" "${CMAKE_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}")
 
 if(UNIX)
+join_paths(libdir "\${prefix}" "${CMAKE_INSTALL_LIBDIR}")
+join_paths(includedir "\${prefix}" "${CMAKE_INSTALL_INCLUDEDIR}")
 add_custom_command(OUTPUT zzipwrap.pc
    COMMAND ${BASH} -c "echo 'prefix=${CMAKE_INSTALL_PREFIX}' > zzipwrap.pc"
-   COMMAND ${BASH} -c "echo 'libdir=\${prefix}/${CMAKE_INSTALL_LIBDIR}' >> zzipwrap.pc"
-   COMMAND ${BASH} -c "echo 'includedir=\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}' >> zzipwrap.pc"
+   COMMAND ${BASH} -c "echo 'libdir=${libdir}' >> zzipwrap.pc"
+   COMMAND ${BASH} -c "echo 'includedir=${includedir}' >> zzipwrap.pc"
    COMMAND ${BASH} -c "echo '' >> zzipwrap.pc"
    COMMAND ${BASH} -c "echo 'Name: ${PROJECT_NAME}' >> zzipwrap.pc"
-   COMMAND ${BASH} -c "echo 'Description: Callback Wrappers for ZZipLib' >> zzipwrap.c"
-   COMMAND ${BASH} -c "echo 'Version: ${VERSION}' >> zzipwrap.pc"
+   COMMAND ${BASH} -c "echo 'Description: Callback Wrappers for ZZipLib' >> zzipwrap.pc"
+   COMMAND ${BASH} -c "echo 'Version: ${PROJECT_VERSION}' >> zzipwrap.pc"
    COMMAND ${BASH} -c "echo 'Requires: zziplib' >> zzipwrap.pc"
    COMMAND ${BASH} -c "echo 'Libs: -L\${libdir} -lzzipwrap' >> zzipwrap.pc"
    COMMAND ${BASH} -c "echo 'Cflags: -I\${includedir}' >> zzipwrap.pc"
@@ -78,7 +83,7 @@ if(ZZIPLIBTOOL)
   if(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG)
     set(lib ${CMAKE_SHARED_LIBRARY_PREFIX})
     set(dll ${CMAKE_SHARED_LIBRARY_SUFFIX})
-    set(libdir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
+    set(libdir ${CMAKE_INSTALL_FULL_LIBDIR})
     get_target_property(libname libzzipwrap OUTPUT_NAME)
     get_target_property(librelease libzzipwrap RELEASE_POSTFIX)
     get_target_property(libversion libzzipwrap VERSION)
